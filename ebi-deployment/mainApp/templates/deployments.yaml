---
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: eureka-deploy
spec:
  replicas: {{ .Values.replicaCount.one }}
  strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: {{ .Values.replicaCount.one }}
  selector:
        matchLabels:
          app: {{ .Values.image.metadata.eureka }}
  template:
        metadata:
          labels:
            app: {{ .Values.image.metadata.eureka }}
        spec:
          containers:
          - name: eureka
            image: "{{ .Values.image.repository.eureka.value }}:{{ .Values.image.repository.eureka.tag }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            env:
            - name: CONFIG_SERVICE
              value: {{ .Values.configService }}
            ports:
            - containerPort: {{ .Values.image.repository.eureka.port }}
            livenessProbe:
              tcpSocket:
                port: {{ .Values.image.repository.eureka.port }}
              initialDelaySeconds: 60
              periodSeconds: 60
            volumeMounts:
              - mountPath: "/log"
                name: log-directory 
          imagePullSecrets:
            - name: {{ .Values.image.imageSecrets }}                
          nodeSelector:
            group: {{ .Values.group.one }}
          volumes:
            - name: log-directory
              hostPath:
                path: {{ .Values.logdirectory.path }}            
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: key-deploy
spec:
  replicas: {{ .Values.replicaCount.one }}
  strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: {{ .Values.replicaCount.one }}
  selector:
        matchLabels:
          app: {{ .Values.image.metadata.key }}
  template:
        metadata:
          labels:
            app: {{ .Values.image.metadata.key }}
        spec:
          containers:
          - name: key
            image: "{{ .Values.image.repository.key.value }}:{{ .Values.image.repository.key.tag }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            env:
            - name: CONFIG_SERVICE
              value: {{ .Values.configService }}
            - name: DB_USERNAME
              value: {{ .Values.db.username }}    
            - name: DB_PASSWORD
              value: {{ .Values.db.password }}
            - name: DB_URL
              value: {{ .Values.db.url }}
            ports:
            - containerPort: {{ .Values.image.repository.key.port }}
            livenessProbe:
              tcpSocket:
                port: {{ .Values.image.repository.key.port }}
              initialDelaySeconds: 60
              periodSeconds: 60
            volumeMounts:
              - mountPath: "/log"
                name: log-directory
          imagePullSecrets:
            - name: {{ .Values.image.imageSecrets }}                 
          nodeSelector:
            group: {{ .Values.group.one }}
          volumes:
            - name: log-directory
              hostPath:
                path: {{ .Values.logdirectory.path }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: filedatabase-deploy
spec:
  replicas: {{ .Values.replicaCount.one }}
  strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: {{ .Values.replicaCount.one }}
  selector:
        matchLabels:
          app: {{ .Values.image.metadata.filedatabase }}          
  template:
        metadata:
          labels:
            app: {{ .Values.image.metadata.filedatabase }}
        spec:
          containers:
          - name: filedatabase
            image: "{{ .Values.image.repository.filedatabase.value }}:{{ .Values.image.repository.filedatabase.tag }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            env:
            - name: CONFIG_SERVICE
              value: {{ .Values.configService }}
            - name: DB_USERNAME
              value: {{ .Values.db.username }}    
            - name: DB_PASSWORD
              value: {{ .Values.db.password }}
            - name: DB_URL
              value: {{ .Values.db.url }}
            ports:
            - containerPort: {{ .Values.image.repository.filedatabase.port }}
            livenessProbe:
              tcpSocket:
                port: {{ .Values.image.repository.filedatabase.port }}
              initialDelaySeconds: 60
              periodSeconds: 60
            volumeMounts:
              - mountPath: "/log"
                name: log-directory              
          imagePullSecrets:
            - name: {{ .Values.image.imageSecrets }}                
          nodeSelector:
            group: {{ .Values.group.one }}
          volumes:
            - name: log-directory
              hostPath:
                path: {{ .Values.logdirectory.path }}            
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: res-deploy
spec:
  replicas: {{ .Values.replicaCount.one }}
  strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: {{ .Values.replicaCount.one }}
  selector:
        matchLabels:
          app: {{ .Values.image.metadata.res }} 
  template:
        metadata:
          labels:
            app: {{ .Values.image.metadata.res }} 
        spec:
          containers:
          - name: res
            image: "{{ .Values.image.repository.res.value }}:{{ .Values.image.repository.res.tag }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            env:
            - name: CONFIG_SERVICE
              value: {{ .Values.configService }}
            - name: S3_ACCESS_KEY
              value: {{ .Values.s3.access.key }}    
            - name: S3_ACCESS_SECRET
              value: {{ .Values.s3.access.secret }}
            - name: S3_ACCESS_URL
              value: {{ .Values.s3.access.url }}
            - name: S3_ACCESS_REGION
              value: {{ .Values.s3.access.region }}                         
            ports:
            - containerPort: {{ .Values.image.repository.res.port }}
            livenessProbe:
              tcpSocket:
                port: {{ .Values.image.repository.res.port }}
              initialDelaySeconds: 60
              periodSeconds: 60
            volumeMounts:
              - mountPath: "/log"
                name: log-directory
          imagePullSecrets:
            - name: {{ .Values.image.imageSecrets }}                
          nodeSelector:
            group: {{ .Values.group.one }}
          volumes:
            - name: log-directory
              hostPath:
                path: {{ .Values.logdirectory.path }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dataedge-deploy
spec:
  replicas: {{ .Values.replicaCount.one }}
  strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: {{ .Values.replicaCount.one }}
  selector:
        matchLabels:
          app: {{ .Values.image.metadata.dataedge }} 
  template:
        metadata:
          labels:
            app: {{ .Values.image.metadata.dataedge }} 
        spec:
          containers:
          - name: dataedge
            image: "{{ .Values.image.repository.dataedge.value }}:{{ .Values.image.repository.dataedge.tag }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            env:
            - name: CONFIG_SERVICE
              value: {{ .Values.configService }}
            ports:
            - containerPort: {{ .Values.image.repository.dataedge.port }}
            livenessProbe:
              tcpSocket:
                port: {{ .Values.image.repository.dataedge.port }}
              initialDelaySeconds: 60
              periodSeconds: 60
            volumeMounts:
              - mountPath: "/log"
                name: log-directory
          imagePullSecrets:
            - name: {{ .Values.image.imageSecrets }}                
          nodeSelector:
            group: {{ .Values.group.one }}
          volumes:
            - name: log-directory
              hostPath:
                path: {{ .Values.logdirectory.path }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: htsget-deploy
spec:
  replicas: {{ .Values.replicaCount.one }}
  strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: {{ .Values.replicaCount.one }}
  selector:
        matchLabels:
          app: {{ .Values.image.metadata.htsget }} 
  template:
        metadata:
          labels:
            app: {{ .Values.image.metadata.htsget }} 
        spec:
          containers:
          - name: htsget
            image: "{{ .Values.image.repository.htsget.value }}:{{ .Values.image.repository.htsget.tag }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            env:
            - name: CONFIG_SERVICE
              value: {{ .Values.configService }}
            ports:
            - containerPort: {{ .Values.image.repository.htsget.port }}
            livenessProbe:
              tcpSocket:
                port: {{ .Values.image.repository.htsget.port }}
              initialDelaySeconds: 60
              periodSeconds: 60
            volumeMounts:
              - mountPath: "/log"
                name: log-directory
          imagePullSecrets:
            - name: {{ .Values.image.imageSecrets }}                
          nodeSelector:
            group: {{ .Values.group.one }}
          volumes:
            - name: log-directory
              hostPath:
                path: {{ .Values.logdirectory.path }}                     
