# Keep this file in sync with docker-compose.yml.

# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

image: dockerhub.ebi.ac.uk/ega/ega-data-api-build-container:latest

# Add the service of docker in docker to allow us to compile the docker images
# https://docs.gitlab.com/runner/executors/kubernetes.html#using-dockerdind
services:
  - name: docker:dind
    alias: dataedge

## List of jobs:
stages:
  - unitTest
  - integrationTest
  - imageBuild

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  TRAVIS_BUILD_DIR: $CI_PROJECT_DIR

## Diffent stages for the CICD of Data API
unitTest:
  stage: unitTest
  script:
    - mvn test

integrationTest:
  stage: integrationTest
  before_script:
    - mvn package -DskipTests=true -Dmaven.javadoc.skip=true -B -V
    - mkdir -p /usr/local/share/ca-certificates/
    - cp extras/certificate/rootCA.pem /usr/local/share/ca-certificates/CA.crt
    - chmod 644 /usr/local/share/ca-certificates/CA.crt
    - update-ca-certificates
    - docker build -t ega-data-api/ega-dataedge  --file Dockerfile.dataedge .
    - docker build -t ega-data-api/ega-res  --file Dockerfile.res .
    - docker build -t ega-data-api/ega-keyserver  --file Dockerfile.keyserver .
    - docker build -t ega-data-api/ega-filedatabase  --file Dockerfile.filedatabase .
    - docker build -t ega-data-api/ega-postgres --file extras/postgresdb/Dockerfile .
    - cd extras && source ./variables.sh
    - docker-compose up -d
    - sleep 90
    - cd ../ega-data-api-it
  script:
    - mvn test "-Dkey.url=https://dataedge" "-Dfile.url=https://dataedge" "-Dres.url=https://dataedge" "-Ddataedge.url=https://dataedge"

imageBuild:
  stage: imageBuild
  script:
    - mvn clean install "-DdockerRegistry=$CI_REGISTRY_IMAGE" "-Dimage.version=$CI_COMMIT_TAG" -P production -DskipTests